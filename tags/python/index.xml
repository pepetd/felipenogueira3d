<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on PEPETD</title>
    <link>https://kstdnr.github.io/tags/python/index.xml</link>
    <description>Recent content in Python on PEPETD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2017 by felipenogueira3d.com</copyright>
    <atom:link href="https://kstdnr.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Parent Constraint to Last - Maya Python</title>
      <link>https://kstdnr.github.io/posts/parent-constraint-to-last---maya-python/</link>
      <pubDate>Mon, 23 Mar 2015 12:34:20 -0700</pubDate>
      
      <guid>https://kstdnr.github.io/posts/parent-constraint-to-last---maya-python/</guid>
      <description>&lt;p&gt;Snippet to constraint all selected nodes to the last selected.&lt;/p&gt;
import maya.cmds as cmds
nodes = cmds.ls(sl=True)
myParent = grps[-1]
grps.pop()
for node in nodes:
    cmds.parentConstraint(parent, myParent, mo=True, weight=1) ## mo = False if you do not want to maintain offset
</description>
    </item>
    
    <item>
      <title>Group Nodes - Maya Python</title>
      <link>https://kstdnr.github.io/posts/group-nodes---maya-python/</link>
      <pubDate>Mon, 23 Mar 2015 12:32:57 -0700</pubDate>
      
      <guid>https://kstdnr.github.io/posts/group-nodes---maya-python/</guid>
      <description>&lt;p&gt;Hey guys!&lt;/p&gt;

&lt;p&gt;Here is a quick snippet to just group nodes under their own little group hierarchie, which will provide us with a driver group and a x_form group. The x_form group is the one that contains the offset values from the parent node while the driver is the group we will use for all connections needed (sometime I even have two driver groups).&lt;/p&gt;
## Imports
import maya
import maya.cmds as cmds

## Creates a locator aligned to each of the selected objects and groups the locators to zero it.
objs = cmds.ls(sl=True)

for obj in objs:
    myParent = cmds.listRelatives(obj, p = True)
    myGroup = cmds.group(empty=True, name = &#34;xform_&#34; + obj)
    if myParent != None: cmds.parent(myGroup, myParent)
    orient = cmds.orientConstraint(obj, myGroup)
    point = cmds.pointConstraint(obj, myGroup)
    cmds.delete(orient, point)
    myDrGroup = cmds.group(empty=True, name = &#34;driver_&#34; + obj)
    orient = cmds.orientConstraint(obj, myDrGroup)
    point = cmds.pointConstraint(obj, myDrGroup)
    cmds.delete(orient, point)
    cmds.parent(obj, myDrGroup)
    cmds.parent(myDrGroup, myGroup)

## END.
</description>
    </item>
    
    <item>
      <title>Create FK Chain - Maya Python</title>
      <link>https://kstdnr.github.io/posts/create-fk-chain---maya-python/</link>
      <pubDate>Mon, 23 Mar 2015 12:29:30 -0700</pubDate>
      
      <guid>https://kstdnr.github.io/posts/create-fk-chain---maya-python/</guid>
      <description>&lt;p&gt;Hey guys! first rigging script for python in maya! pretty simple, it creates a FK chain from selected joints with flags to align the controllers to world or to the Joint. Wrote this script to do Gainer&amp;rsquo;s(Sasktel) spine rig in Maya ( I am re-rigging him in Maya.)&lt;/p&gt;
# ------------------------------------------------------------------------------------------------------
# Rigging Modules
# -- Method Rigger (Maya)
#
# By: Felipe[PePeTD]Nogueira
# ------------------------------------------------------------------------------------------------------

## Imports
import maya
import maya.cmds as cmds

# Create FK Chain rig Module.
# createFKChain(world) - if left unchanged, world = True by default.
# -------------------------------------------------------------------
def createFKChain(world=True):
    ## Grab current selection (!warning this function works on any type of node).
    joints = cmds.ls(sl=True)
    locators = []
    circles = []
    groups = []
    counter = 0

    ## Goes through the newly created list of joints and creates a locator and controller
    ## for each node grouping and constrainning it all accordinly.
    for joint in joints:
        curPos = cmds.xform(joint, q=True, ws=True, t=True)

        ## Creates the locator at the position of the node, Centers its pivot, and freezes it.
        curLoc = cmds.spaceLocator(p=curPos)
        locators.append(curLoc)
        cmds.CenterPivot(curLoc)
        cmds.parent(curLoc, joint)
        cmds.makeIdentity(curLoc, apply=True, t=1, r=1, s=1)

        ## Creates the Circle shape at the position of the node and aligns it to the node depending
        ## on the state of (world) if true then aligns it to world if false the circle shapes will be
        ## aligned to the node(joint).

        ## Align the control curves to world or to each given node according to the state of (world).
        if world == True:
            curCircle = cmds.circle(nr=[0, 0, 1], r=1, c=curPos)
            circles.append(curCircle)
            cmds.CenterPivot(curCircle)
            cmds.makeIdentity(curCircle, apply=True, t=1, r=1, s=1)
            curGroup = cmds.duplicate(curCircle[0], rr=True, rc=True, po=True)
            curGroup[0] = cmds.rename(curGroup[0], (curGroup[0]+&#34;_Grp&#34;))
            groups.append(curGroup)
            cmds.parent(curCircle[0], curGroup[0])
        else:
            curCircle = cmds.circle(nr=[1, 0, 0], r=1)
            circles.append(curCircle)
            cmds.parent(curCircle[0], joint)
            cmds.CenterPivot(curCircle)
            cmds.makeIdentity(curCircle, apply=False, t=1, r=1, s=1)
            cmds.parent(curCircle[0], w=True)
            curGroup = cmds.duplicate(curCircle[0], rr=True, rc=True, po=True)
            curGroup[0] = cmds.rename(curGroup[0], (curGroup[0]+&#34;_Grp&#34;))
            groups.append(curGroup)
            cmds.parent(curCircle[0], curGroup[0])

        ## Checks to see if we are on the first node or not and does the appropriate tasks.
        if counter == 0:
            cmds.parent(curLoc[0], w=True)
            rigGroup = cmds.duplicate(curLoc[0], rr=True, rc=True, po=True)
            rigGroup[0] = cmds.rename(rigGroup[0], (rigGroup[0]+&#34;_Grp&#34;))
            cmds.parent(joint, rigGroup[0])
            cmds.parent(curLoc[0], rigGroup[0])
        else:
            cmds.parent(curLoc[0], locators[counter-1][0])
            cmds.parent(curGroup[0], circles[counter-1][0])

        ## Finally we parentContraint the joint to the locator.
        cmds.parentConstraint(curCircle[0], curLoc[0], mo=True)
        cmds.parentConstraint(curLoc[0], joint, mo=True)

        counter += 1

createFKChain(world=False)
## END.
</description>
    </item>
    
  </channel>
</rss>