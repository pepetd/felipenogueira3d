//------------------------------------------------------------------------
// Requires: "fs-em", "isWholeNumber", and "strip" functions
//
// Modular Scale (returns value in pixels)
//------------------------------------------------------------------------
$mod-scale-base: 4px !default;

// Multiple of base unit in pixels
@function modValue( $index ) {
  @if not unitless($index) {
    @warn "ðŸ”´  modScale(#{$index}) must be unitless";
  }
  @else if $index < 1 {
    @warn "ðŸ”´  modScale(#{$index}) must be > 0";
    @return 0;
  }
  @else {
    @return $index * $mod-scale-base;
  }
}

// Adjusts PX value to the nearest multiple of the base unit
@function modPx( $val ) {
  // Ignore values with invalid units
  @if unit($val) != "px" {
    @warn "ðŸ”´  modPx(#{$val}) unit not valid";
    @return fs-em( $val );
  }

  // Check if value is a multiple of the base unit
  @if ($val % $mod-scale-base) == 0 {
    @return $val;
  }
  // Find nearest multiple
  @else {
    // @debug "ðŸ”µ  #{$val} adjusted to #{round( $val / $mod-scale-base ) * $mod-scale-base}";
    @return round($val / $mod-scale-base) * $mod-scale-base;
  }
}

// Adjusts EM ratio to the nearest multiple of the base unit
@function modEm( $val, $context: $base-font-size ) {
  // Value must be unitless or in ems, and context must be in pixels
  @if (not unitless($val) and unit($val) != "em") or unit($context) != "px" {
    @warn "ðŸ”´  modEm(#{$val}, #{$context}) units not valid";
    @return fs-em( $val );
  }

  // Convert ratio to pixels
  $val: strip($val) * $context;

  // Adjust to nearest base unit multiple
  $val: modPx($val);

  // Return new em value
  @return fs-em($val, $context);
}