{"version":3,"sources":["webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/promise-polyfill/src/finally.js","webpack:///./node_modules/lunr/lunr.js","webpack:///./node_modules/fitvids/index.js","webpack:///./node_modules/whatwg-fetch/fetch.js","webpack:///./node_modules/promise-polyfill/src/index.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/process/browser.js"],"names":["g","this","Function","e","window","module","exports","__webpack_exports__","callback","constructor","then","value","resolve","reason","reject","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","porterStemmer","w","stem","suffix","firstch","re","re2","re3","re4","length","substr","toUpperCase","test","replace","fp","exec","toLowerCase","version","utils","warn","message","console","asString","obj","toString","clone","Object","create","keys","i","key","val","Array","isArray","slice","TypeError","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","prototype","undefined","Set","elements","complete","intersect","other","union","contains","empty","object","a","b","intersection","element","push","concat","idf","posting","documentCount","documentsWithTerm","x","Math","log","abs","Token","str","metadata","update","fn","tokenizer","map","t","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","tokenMetadata","Pipeline","_stack","registeredFunctions","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","memo","j","result","k","runString","token","reset","toJSON","Vector","_magnitude","positionForIndex","index","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","upsert","position","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","generateStopWordFilter","stopWords","words","reduce","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","root","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","frame","pop","noEditNode","char","insertionNode","substitutionNode","transposeNode","charA","charB","next","prefix","edge","_str","labels","sort","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","parent","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","requiredMatches","prohibitedMatches","clauses","terms","clauseMatches","usePipeline","m","termTokenSet","expandedTerms","presence","REQUIRED","field","expandedTerm","termIndex","_index","fieldPosting","matchingDocumentRefs","termField","matchingDocumentsSet","PROHIBITED","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","allRequiredMatches","allProhibitedMatches","matchingFieldRefs","results","matches","isNegated","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","_documents","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","attributes","RangeError","number","k1","doc","extractor","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","fieldBoost","docBoost","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","OPTIONAL","options","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","join","emit","type","escapeCharacter","EOS","width","ignore","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","PRESENCE","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseClause","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parsePresence","parseField","parseTerm","errorMessage","nextLexeme","possibleFields","f","parseEditDistance","parseBoost","parseInt","isNaN","__webpack_require__","selectors","queryAll","el","selector","document","querySelectorAll","toSelectorArray","input","split","filter","hasLength","flatten","parentSelector","opts","isObject","players","containers","getElementById","head","getElementsByTagName","appendChild","div","createElement","innerHTML","childNodes","styles","custom","ignored","notIgnored","container","video","parentNode","className","widthAttr","getAttribute","heightAttr","clientWidth","aspect","clientHeight","removeAttribute","wrapper","insertBefore","style","paddingTop","wrap","r","d","Headers","Request","Response","DOMException","fetch","support","searchParams","self","iterable","Symbol","blob","Blob","formData","arrayBuffer","viewClasses","isArrayBufferView","ArrayBuffer","isView","normalizeName","normalizeValue","iteratorFor","items","iterator","shift","done","headers","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","fileReaderReady","reader","onload","onerror","error","readBlobAsArrayBuffer","FileReader","promise","readAsArrayBuffer","bufferClone","buf","view","Uint8Array","byteLength","set","buffer","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","isDataView","_bodyArrayBuffer","get","rejected","text","readAsText","readBlobAsText","chars","fromCharCode","readArrayBufferAsText","decode","json","JSON","oldValue","has","hasOwnProperty","thisArg","values","entries","methods","url","credentials","method","mode","signal","upcased","normalizeMethod","referrer","form","bytes","decodeURIComponent","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","location","err","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","line","parts","parseHeaders","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","setImmediate","_finally__WEBPACK_IMPORTED_MODULE_0__","setTimeoutFunc","setTimeout","Boolean","noop","_state","_handled","_value","_deferreds","doResolve","handle","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","newValue","finale","bind","_unhandledRejectionFn","Handler","ex","prom","all","remaining","res","race","scope","Timeout","clearFn","_id","_clearFn","clearTimeout","setInterval","clearInterval","timeout","close","unref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","clearImmediate","process","registerImmediate","html","channel","messagePrefix","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","getPrototypeOf","nextTick","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","random","onGlobalMessage","attachEvent","MessageChannel","port1","event","data","port2","documentElement","script","removeChild","task","source","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","array","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask"],"mappings":"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AOA5M,EAAA,IAAA4M,OALA,kCAOA3M,EAAA,kBACAC,EAAA,iBACAC,EAAA,aACAC,EAAA,kBACAC,EAAA,KACAC,EAAA,cACAC,EAAA,IAAAqM,OAAA,sBACApM,EAAA,IAAAoM,OAAA,IAAAhN,EAAAD,EAAA,gBAEAc,EAAA,mBACAC,EAAA,2IAEAC,EAAA,iDAEAC,EAAA,sFACAC,EAAA,oBAEAC,EAAA,WACAC,EAAA,MACAC,EAAA,IAAA4L,OAAA,IAAAhN,EAAAD,EAAA,gBAkIA,SAAAsJ,GACA,OAAAA,EAAAzC,OAAA3E,KAIAZ,EAAAsG,SAAAG,iBAAAzG,EAAAQ,QAAA;;;;IAmBAR,EAAA4L,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,OAAA,SAAApE,EAAAqE,GAEA,OADArE,EAAAqE,KACArE,GACG,IAEH,gBAAAK,GACA,GAAAA,GAAA8D,EAAA9D,EAAA5F,cAAA4F,EAAA5F,WAAA,OAAA4F,IAiBAhI,EAAAO,eAAAP,EAAA4L,uBAAA,CACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGA5L,EAAAsG,SAAAG,iBAAAzG,EAAAO,eAAA;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","file":"vendors~main.js","sourcesContent":["var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        // @ts-ignore\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nexport default finallyConstructor;\n","/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.3.6\n * Copyright (C) 2019 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.3.6\"\n/*!\n * lunr.utils\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n * @namespace lunr.utils\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf lunr.utils\n * @function\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf lunr.utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\n\n/**\n * Clones an object.\n *\n * Will create a copy of an existing object such that any mutations\n * on the copy cannot affect the original.\n *\n * Only shallow objects are supported, passing a nested object to this\n * function will cause a TypeError.\n *\n * Objects with primitives, and arrays of primitives are supported.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} a clone of the passed object.\n * @throws {TypeError} when a nested object is passed.\n * @memberOf Utils\n */\nlunr.utils.clone = function (obj) {\n  if (obj === null || obj === undefined) {\n    return obj\n  }\n\n  var clone = Object.create(null),\n      keys = Object.keys(obj)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i],\n        val = obj[key]\n\n    if (Array.isArray(val)) {\n      clone[key] = val.slice()\n      continue\n    }\n\n    if (typeof val === 'string' ||\n        typeof val === 'number' ||\n        typeof val === 'boolean') {\n      clone[key] = val\n      continue\n    }\n\n    throw new TypeError(\"clone is not deep and does not support nested objects\")\n  }\n\n  return clone\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/*!\n * lunr.Set\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A lunr set.\n *\n * @constructor\n */\nlunr.Set = function (elements) {\n  this.elements = Object.create(null)\n\n  if (elements) {\n    this.length = elements.length\n\n    for (var i = 0; i < this.length; i++) {\n      this.elements[elements[i]] = true\n    }\n  } else {\n    this.length = 0\n  }\n}\n\n/**\n * A complete set that contains all elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.complete = {\n  intersect: function (other) {\n    return other\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return true\n  }\n}\n\n/**\n * An empty set that contains no elements.\n *\n * @static\n * @readonly\n * @type {lunr.Set}\n */\nlunr.Set.empty = {\n  intersect: function () {\n    return this\n  },\n\n  union: function (other) {\n    return other\n  },\n\n  contains: function () {\n    return false\n  }\n}\n\n/**\n * Returns true if this set contains the specified object.\n *\n * @param {object} object - Object whose presence in this set is to be tested.\n * @returns {boolean} - True if this set contains the specified object.\n */\nlunr.Set.prototype.contains = function (object) {\n  return !!this.elements[object]\n}\n\n/**\n * Returns a new set containing only the elements that are present in both\n * this set and the specified set.\n *\n * @param {lunr.Set} other - set to intersect with this set.\n * @returns {lunr.Set} a new set that is the intersection of this and the specified set.\n */\n\nlunr.Set.prototype.intersect = function (other) {\n  var a, b, elements, intersection = []\n\n  if (other === lunr.Set.complete) {\n    return this\n  }\n\n  if (other === lunr.Set.empty) {\n    return other\n  }\n\n  if (this.length < other.length) {\n    a = this\n    b = other\n  } else {\n    a = other\n    b = this\n  }\n\n  elements = Object.keys(a.elements)\n\n  for (var i = 0; i < elements.length; i++) {\n    var element = elements[i]\n    if (element in b.elements) {\n      intersection.push(element)\n    }\n  }\n\n  return new lunr.Set (intersection)\n}\n\n/**\n * Returns a new set combining the elements of this and the specified set.\n *\n * @param {lunr.Set} other - set to union with this set.\n * @return {lunr.Set} a new set that is the union of this and the specified set.\n */\n\nlunr.Set.prototype.union = function (other) {\n  if (other === lunr.Set.complete) {\n    return lunr.Set.complete\n  }\n\n  if (other === lunr.Set.empty) {\n    return this\n  }\n\n  return new lunr.Set(Object.keys(this.elements).concat(Object.keys(other.elements)))\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * Optional metadata can be passed to the tokenizer, this metadata will be cloned and\n * added as metadata to every token that is created from the object to be tokenized.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @param {?object} metadata - Optional metadata to associate with every token\n * @returns {lunr.Token[]}\n * @see {@link lunr.Pipeline}\n */\nlunr.tokenizer = function (obj, metadata) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(\n        lunr.utils.asString(t).toLowerCase(),\n        lunr.utils.clone(metadata)\n      )\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        var tokenMetadata = lunr.utils.clone(metadata) || {}\n        tokenMetadata[\"position\"] = [sliceStart, sliceLength]\n        tokenMetadata[\"index\"] = tokens.length\n\n        tokens.push(\n          new lunr.Token (\n            str.slice(sliceStart, sliceEnd),\n            tokenMetadata\n          )\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n    var memo = []\n\n    for (var j = 0; j < tokens.length; j++) {\n      var result = fn(tokens[j], j, tokens)\n\n      if (result === void 0 || result === '') continue\n\n      if (Array.isArray(result)) {\n        for (var k = 0; k < result.length; k++) {\n          memo.push(result[k])\n        }\n      } else {\n        memo.push(result)\n      }\n    }\n\n    tokens = memo\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @param {?object} metadata - Optional metadata to associate with the token\n * passed to the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str, metadata) {\n  var token = new lunr.Token (str, metadata)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the similarity between this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / this.magnitude() || 0\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2019 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n * @function\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @function\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @function\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      }\n\n      stack.push({\n        node: noEditNode,\n        editsRemaining: frame.editsRemaining,\n        str: frame.str.slice(1)\n      })\n    }\n\n    if (frame.editsRemaining == 0) {\n      continue\n    }\n\n    // insertion\n    if (\"*\" in frame.node.edges) {\n      var insertionNode = frame.node.edges[\"*\"]\n    } else {\n      var insertionNode = new lunr.TokenSet\n      frame.node.edges[\"*\"] = insertionNode\n    }\n\n    if (frame.str.length == 0) {\n      insertionNode.final = true\n    }\n\n    stack.push({\n      node: insertionNode,\n      editsRemaining: frame.editsRemaining - 1,\n      str: frame.str\n    })\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.str.length > 1) {\n      stack.push({\n        node: frame.node,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      }\n\n      stack.push({\n        node: substitutionNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: frame.str.slice(1)\n      })\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      }\n\n      stack.push({\n        node: transposeNode,\n        editsRemaining: frame.editsRemaining - 1,\n        str: charA + frame.str.slice(2)\n      })\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * When a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      /* In Safari, at this point the prefix is sometimes corrupted, see:\n       * https://github.com/olivernn/lunr.js/issues/279 Calling any\n       * String.prototype method forces Safari to \"cast\" this string to what\n       * it's supposed to be, fixing the bug. */\n      frame.prefix.charAt(0)\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.fieldVectors - Field vectors\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * Each term also supports a presence modifier. By default a term's presence in document is optional, however\n * this can be changed to either required or prohibited. For a term's presence to be required in a document the\n * term should be prefixed with a '+', e.g. `+foo bar` is a search for documents that must contain 'foo' and\n * optionally contain 'bar'. Conversely a leading '-' sets the terms presence to prohibited, i.e. it must not\n * appear in a document, e.g. `-foo bar` is a search for documents that do not contain 'foo' but may contain 'bar'.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n * @example <caption>terms with presence modifiers</caption>\n * -foo +bar baz\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.  For details on how the score is calculated, please see\n * the {@link https://lunrjs.com/guides/searching.html#scoring|guide}.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null),\n      requiredMatches = Object.create(null),\n      prohibitedMatches = Object.create(null)\n\n  /*\n   * To support field level boosts a query vector is created per\n   * field. An empty vector is eagerly created to support negated\n   * queries.\n   */\n  for (var i = 0; i < this.fields.length; i++) {\n    queryVectors[this.fields[i]] = new lunr.Vector\n  }\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null,\n        clauseMatches = lunr.Set.complete\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term, {\n        fields: clause.fields\n      })\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      /*\n       * If a term marked as required does not exist in the tokenSet it is\n       * impossible for the search to return any matches. We set all the field\n       * scoped required matches set to empty and stop examining any further\n       * clauses.\n       */\n      if (expandedTerms.length === 0 && clause.presence === lunr.Query.presence.REQUIRED) {\n        for (var k = 0; k < clause.fields.length; k++) {\n          var field = clause.fields[k]\n          requiredMatches[field] = lunr.Set.empty\n        }\n\n        break\n      }\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n        var expandedTerm = expandedTerms[j],\n            posting = this.invertedIndex[expandedTerm],\n            termIndex = posting._index\n\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field,\n              matchingDocumentsSet = new lunr.Set(matchingDocumentRefs)\n\n          /*\n           * if the presence of this term is required ensure that the matching\n           * documents are added to the set of required matches for this clause.\n           *\n           */\n          if (clause.presence == lunr.Query.presence.REQUIRED) {\n            clauseMatches = clauseMatches.union(matchingDocumentsSet)\n\n            if (requiredMatches[field] === undefined) {\n              requiredMatches[field] = lunr.Set.complete\n            }\n          }\n\n          /*\n           * if the presence of this term is prohibited ensure that the matching\n           * documents are added to the set of prohibited matches for this field,\n           * creating that set if it does not yet exist.\n           */\n          if (clause.presence == lunr.Query.presence.PROHIBITED) {\n            if (prohibitedMatches[field] === undefined) {\n              prohibitedMatches[field] = lunr.Set.empty\n            }\n\n            prohibitedMatches[field] = prohibitedMatches[field].union(matchingDocumentsSet)\n\n            /*\n             * Prohibited matches should not be part of the query vector used for\n             * similarity scoring and no metadata should be extracted so we continue\n             * to the next field\n             */\n            continue\n          }\n\n          /*\n           * The query field vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n\n    /**\n     * If the presence was required we need to update the requiredMatches field sets.\n     * We do this after all fields for the term have collected their matches because\n     * the clause terms presence is required in _any_ of the fields not _all_ of the\n     * fields.\n     */\n    if (clause.presence === lunr.Query.presence.REQUIRED) {\n      for (var k = 0; k < clause.fields.length; k++) {\n        var field = clause.fields[k]\n        requiredMatches[field] = requiredMatches[field].intersect(clauseMatches)\n      }\n    }\n  }\n\n  /**\n   * Need to combine the field scoped required and prohibited\n   * matching documents into a global set of required and prohibited\n   * matches\n   */\n  var allRequiredMatches = lunr.Set.complete,\n      allProhibitedMatches = lunr.Set.empty\n\n  for (var i = 0; i < this.fields.length; i++) {\n    var field = this.fields[i]\n\n    if (requiredMatches[field]) {\n      allRequiredMatches = allRequiredMatches.intersect(requiredMatches[field])\n    }\n\n    if (prohibitedMatches[field]) {\n      allProhibitedMatches = allProhibitedMatches.union(prohibitedMatches[field])\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  /*\n   * If the query is negated (contains only prohibited terms)\n   * we need to get _all_ fieldRefs currently existing in the\n   * index. This is only done when we know that the query is\n   * entirely prohibited terms to avoid any cost of getting all\n   * fieldRefs unnecessarily.\n   *\n   * Additionally, blank MatchData must be created to correctly\n   * populate the results.\n   */\n  if (query.isNegated()) {\n    matchingFieldRefs = Object.keys(this.fieldVectors)\n\n    for (var i = 0; i < matchingFieldRefs.length; i++) {\n      var matchingFieldRef = matchingFieldRefs[i]\n      var fieldRef = lunr.FieldRef.fromString(matchingFieldRef)\n      matchingFields[matchingFieldRef] = new lunr.MatchData\n    }\n  }\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef\n\n    if (!allRequiredMatches.contains(docRef)) {\n      continue\n    }\n\n    if (allProhibitedMatches.contains(docRef)) {\n      continue\n    }\n\n    var fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = Object.create(null),\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2019 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = Object.create(null)\n  this._documents = Object.create(null)\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * A function that is used to extract a field from a document.\n *\n * Lunr expects a field to be at the top level of a document, if however the field\n * is deeply nested within a document an extractor function can be used to extract\n * the right field for indexing.\n *\n * @callback fieldExtractor\n * @param {object} doc - The document being added to the index.\n * @returns {?(string|object|object[])} obj - The object that will be indexed for this field.\n * @example <caption>Extracting a nested field</caption>\n * function (doc) { return doc.nested.field }\n */\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * Fields can be boosted at build time. This allows terms within that field to have more\n * importance when ranking search results. Use a field boost to specify that matches within\n * one field are more important than other fields.\n *\n * @param {string} fieldName - The name of a field to index in all documents.\n * @param {object} attributes - Optional attributes associated with this field.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this field.\n * @param {fieldExtractor} [attributes.extractor] - Function to extract a field from a document.\n * @throws {RangeError} fieldName cannot contain unsupported characters '/'\n */\nlunr.Builder.prototype.field = function (fieldName, attributes) {\n  if (/\\//.test(fieldName)) {\n    throw new RangeError (\"Field '\" + fieldName + \"' contains illegal character '/'\")\n  }\n\n  this._fields[fieldName] = attributes || {}\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * Entire documents can be boosted at build time. Applying a boost to a document indicates that\n * this document should rank higher in search results than other documents.\n *\n * @param {object} doc - The document to add to the index.\n * @param {object} attributes - Optional attributes associated with this document.\n * @param {number} [attributes.boost=1] - Boost applied to all terms within this document.\n */\nlunr.Builder.prototype.add = function (doc, attributes) {\n  var docRef = doc[this._ref],\n      fields = Object.keys(this._fields)\n\n  this._documents[docRef] = attributes || {}\n  this.documentCount += 1\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i],\n        extractor = this._fields[fieldName].extractor,\n        field = extractor ? extractor(doc) : doc[fieldName],\n        tokens = this.tokenizer(field, {\n          fields: [fieldName]\n        }),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < fields.length; k++) {\n          posting[fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  var fields = Object.keys(this._fields)\n\n  for (var i = 0; i < fields.length; i++) {\n    var fieldName = fields[i]\n    accumulator[fieldName] = accumulator[fieldName] / documentsWithField[fieldName]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        fieldName = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n\n    var fieldBoost = this._fields[fieldName].boost || 1,\n        docBoost = this._documents[fieldRef.docRef].boost || 1\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[fieldName])) + tf)\n      score *= fieldBoost\n      score *= docBoost\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: Object.keys(this._fields),\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata || {})\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n\n  if (term !== undefined) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = clonedMetadata\n  }\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\n\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * Constants for indicating what kind of presence a term must have in matching documents.\n *\n * @constant\n * @enum {number}\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with required presence</caption>\n * query.term('foo', { presence: lunr.Query.presence.REQUIRED })\n */\nlunr.Query.presence = {\n  /**\n   * Term's presence in a document is optional, this is the default value.\n   */\n  OPTIONAL: 1,\n\n  /**\n   * Term's presence in a document is required, documents that do not contain\n   * this term will not be returned.\n   */\n  REQUIRED: 2,\n\n  /**\n   * Term's presence in a document is prohibited, documents that do contain\n   * this term will not be returned.\n   */\n  PROHIBITED: 3\n}\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=lunr.Query.wildcard.NONE] - Whether the term should have wildcards appended or prepended.\n * @property {number} [presence=lunr.Query.presence.OPTIONAL] - The terms presence in any matching documents.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  if (!('presence' in clause)) {\n    clause.presence = lunr.Query.presence.OPTIONAL\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * A negated query is one in which every clause has a presence of\n * prohibited. These queries require some special processing to return\n * the expected results.\n *\n * @returns boolean\n */\nlunr.Query.prototype.isNegated = function () {\n  for (var i = 0; i < this.clauses.length; i++) {\n    if (this.clauses[i].presence != lunr.Query.presence.PROHIBITED) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * The term is used as is, i.e. no tokenization will be performed by this method. Instead conversion\n * to a token or token-like string should be done before calling this method.\n *\n * The term will be converted to a string by calling `toString`. Multiple terms can be passed as an\n * array, each term in the array will share the same options.\n *\n * @param {object|object[]} term - The term(s) to add to the query.\n * @param {object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n * @example <caption>using lunr.tokenizer to convert a string to tokens before using them as terms</caption>\n * query.term(lunr.tokenizer(\"foo bar\"))\n */\nlunr.Query.prototype.term = function (term, options) {\n  if (Array.isArray(term)) {\n    term.forEach(function (t) { this.term(t, lunr.utils.clone(options)) }, this)\n    return this\n  }\n\n  var clause = options || {}\n  clause.term = term.toString()\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\nlunr.QueryLexer.PRESENCE = 'PRESENCE'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    // \"+\" indicates term presence is required\n    // checking for length to ensure that only\n    // leading \"+\" are considered\n    if (char == \"+\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    // \"-\" indicates term presence is prohibited\n    // checking for length to ensure that only\n    // leading \"-\" are considered\n    if (char == \"-\" && lexer.width() === 1) {\n      lexer.emit(lunr.QueryLexer.PRESENCE)\n      return lunr.QueryLexer.lexText\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseClause\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseClause = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.PRESENCE:\n      return lunr.QueryParser.parsePresence\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parsePresence = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.str) {\n    case \"-\":\n      parser.currentClause.presence = lunr.Query.presence.PROHIBITED\n      break\n    case \"+\":\n      parser.currentClause.presence = lunr.Query.presence.REQUIRED\n      break\n    default:\n      var errorMessage = \"unrecognised presence operator'\" + lexeme.str + \"'\"\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term or field, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term or field, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    case lunr.QueryLexer.PRESENCE:\n      parser.nextClause()\n      return lunr.QueryParser.parsePresence\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n","\n'use strict'\n\nvar selectors = [\n\t'iframe[src*=\"player.vimeo.com\"]',\n\t'iframe[src*=\"youtube.com\"]',\n\t'iframe[src*=\"youtube-nocookie.com\"]',\n\t'iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\n\t'object'\n]\n\nvar css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}'\n\nmodule.exports = function (parentSelector, opts) {\n\tparentSelector = parentSelector || 'body'\n\topts = opts || {}\n\n\tif (isObject(parentSelector)) {\n\t\topts = parentSelector\n\t\tparentSelector = 'body'\n\t}\n\n\topts.ignore = opts.ignore || ''\n\topts.players = opts.players || ''\n\n\tvar containers = queryAll(parentSelector)\n\tif (!hasLength(containers)) return\n\n\tif (!document.getElementById('fit-vids-style')) {\n\t\tvar head = document.head || document.getElementsByTagName('head')[0]\n\t\thead.appendChild(styles())\n\t}\n\n\tvar custom = toSelectorArray(opts.players) || []\n\tvar ignored = toSelectorArray(opts.ignore) || []\n\tvar selector = selectors\n\t\t.filter(notIgnored(ignored))\n\t\t.concat(custom)\n\t\t.join()\n\n\tif (!hasLength(selector)) return\n\n\tcontainers.forEach(function (container) {\n\t\tvar videos = queryAll(container, selector)\n\t\tvideos.forEach(function (video) {\n\t\t\twrap(video)\n\t\t})\n\t})\n}\n\nfunction queryAll (el, selector) {\n\tif (typeof el === 'string') {\n\t\tselector = el\n\t\tel = document\n\t}\n\treturn Array.prototype.slice.call(el.querySelectorAll(selector))\n}\n\nfunction toSelectorArray (input) {\n\tif (typeof input === 'string') {\n\t\treturn input.split(',').map(trim).filter(hasLength)\n\t} else if (isArray(input)) {\n\t\treturn flatten(input.map(toSelectorArray).filter(hasLength))\n\t}\n\treturn input || []\n}\n\nfunction wrap (el) {\n\tif (/fluid-width-video-wrapper/.test(el.parentNode.className)) return\n\n\tvar widthAttr = parseInt(el.getAttribute('width'), 10)\n\tvar heightAttr = parseInt(el.getAttribute('height'), 10)\n\n\tvar width = !isNaN(widthAttr) ? widthAttr : el.clientWidth\n\tvar height = !isNaN(heightAttr) ? heightAttr : el.clientHeight\n\tvar aspect = height / width\n\n\tel.removeAttribute('width')\n\tel.removeAttribute('height')\n\n\tvar wrapper = document.createElement('div')\n\tel.parentNode.insertBefore(wrapper, el)\n\twrapper.className = 'fluid-width-video-wrapper'\n\twrapper.style.paddingTop = (aspect * 100) + '%'\n\twrapper.appendChild(el)\n}\n\nfunction styles () {\n\tvar div = document.createElement('div')\n\tdiv.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>'\n\treturn div.childNodes[1]\n}\n\nfunction notIgnored (ignored) {\n\tif (ignored.length < 1) {\n\t\treturn function () {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn function (selector) {\n\t\treturn ignored.indexOf(selector) === -1\n\t}\n}\n\nfunction hasLength (input) {\n\treturn input.length > 0\n}\n\nfunction trim (str) {\n\treturn str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction flatten (input) {\n\treturn [].concat.apply([], input)\n}\n\nfunction isObject (input) {\n\treturn Object.prototype.toString.call(input) === '[object Object]'\n}\n\nfunction isArray (input) {\n\treturn Object.prototype.toString.call(input) === '[object Array]'\n}\n","var support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nexport function Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nexport function Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nexport function Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nexport var DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nexport function fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n","import promiseFinally from './finally';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction isArray(x) {\n  return Boolean(x && typeof x.length !== 'undefined');\n}\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.all accepts an array'));\n    }\n\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.race accepts an array'));\n    }\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      Promise.resolve(arr[i]).then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  // @ts-ignore\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      // @ts-ignore\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nexport default Promise;\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"sourceRoot":""}